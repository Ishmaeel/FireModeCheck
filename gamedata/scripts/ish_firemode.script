-- FireModeCheck
-- Last modified: 2024.10.19
-- https://github.com/Ishmaeel/FireModeCheck

firing_mode_descriptions = { [1] = "Single", [2] = "Burst", [3] = "Burst", [-1] = "Full-Auto" }

handler_functions = { "handler_basic", "handler_dual_key", "handler_single_key" }

local display_duration = 3 -- seconds
local hide_after = 0

local DISPLAY_TEXT = 1
local DISPLAY_IMAGE = 2
local SINGLE_KEY_MODE = 3

local _tap_count = 0
local _hide_gui = false
local _user_mode = SINGLE_KEY_MODE
local _display_mode = DISPLAY_TEXT + DISPLAY_IMAGE

local k_PREV = key_bindings.kWPN_FIREMODE_PREV
local k_NEXT = key_bindings.kWPN_FIREMODE_NEXT

function on_game_start()
    perform_setup()
end

function ishy_on_before_key_press(dik, bind, dis, flags)
    if bind == k_PREV or bind == k_NEXT then
        keypress_handler = this[handler_functions[_user_mode]]
        if keypress_handler then
            local allow_keypress = keypress_handler(bind)
            flags.ret_value = allow_keypress
        end
    end
end

-- basic mode: Just reports the new firing mode and lets the switch happen normally.
function handler_basic()
    show_firemode()

    return true
end

-- dual mode: NEXT key works normally. PREV key blocks the switch and just reports firing mode.
function handler_dual_key(bind)
    show_firemode()

    return (bind ~= k_PREV)
end

-- single mode: Both keys function in the same way: Single tap: check only. Double tap, switch to next mode.
function handler_single_key()
    show_firemode()

    _tap_count = (_tap_count or 0) + 1

    if _tap_count > 1 then
        reset_taps_immediately()
    else
        reset_taps_after_delay()
    end

    return (_tap_count == 0)
end

function show_firemode()
    hide_after = time_global() + display_duration * 1000
    CreateTimeEvent("firemode_check", "show_firemode_delayed", 0.0, show_firemode_delayed)
end

function show_firemode_refresh()
    CreateTimeEvent("firemode_check", "show_firemode_delayed", 0.1, show_firemode_delayed)
    return true
end

function show_firemode_delayed()
    local current_mode, selector_type = get_fire_mode_data()
    local mode_description = firing_mode_descriptions[current_mode]

    if mode_description then
        if bit_and(_display_mode, DISPLAY_TEXT) > 0 then
            show_message(mode_description)
        end

        if bit_and(_display_mode, DISPLAY_IMAGE) > 0 then
            show_indicator(mode_description, selector_type)
        end
    else
        hide_after = 0
    end

    if time_global() >= hide_after then
        CreateTimeEvent("firemode_check", "hide_firemode_delayed", 0, hide_firemode_delayed)
    else
        CreateTimeEvent("firemode_check", "show_firemode_refresh", 0, show_firemode_refresh)
    end

    return true
end

function hide_firemode_delayed()
    hide_all()
    return true
end

function reset_taps_after_delay()
    CreateTimeEvent("firemode_check", "reset_taps_delayed", 0.5, reset_taps_immediately)
end

function reset_taps_immediately()
    _tap_count = 0
    return true
end

function get_fire_mode_data()
    local weapon = db.actor:active_item()
    if weapon == nil or not IsWeapon(weapon) or IsItem("fake_ammo_wpn", nil, weapon) then
        return
    end

    local has_multiple_modes, firemode_upgrade = get_multiple_fire_modes_and_upgrade(weapon)
    if not has_multiple_modes then
        return
    end

    local cWeapon = weapon:cast_Weapon()
    local root_section = weapon:section()
    root_section = ini_sys and ini_sys:r_string_ex(root_section, "parent_section") or root_section

    local fire_mode = (cWeapon and cWeapon:GetFireMode()) or 0
    local selector_type = table.concat({ root_section, firemode_upgrade }, "_")

    return fire_mode, selector_type
end

function get_multiple_fire_modes_and_upgrade(weapon)
    local section = weapon:section()

    local has_multiple_fire_modes = false
    local installed_upgrade_section = nil

    local fire_modes = parse_list(ini_sys, section, "fire_modes")

    if fire_modes and table.getn(fire_modes) > 1 then
        has_multiple_fire_modes = true
    end

    weapon:iterate_installed_upgrades(function(upgr_sec)
        local upgr_prop_sec = ini_sys and ini_sys:r_string_ex(upgr_sec, "section")
        if upgr_prop_sec then
            local upgr_fire_modes = parse_list(ini_sys, upgr_prop_sec, "fire_modes")
            if upgr_fire_modes and table.getn(upgr_fire_modes) > 1 then
                has_multiple_fire_modes = true
                installed_upgrade_section = upgr_sec
                return true
            end
        end
    end)

    return has_multiple_fire_modes, installed_upgrade_section
end

function show_message(message, ...)
    if message and ish_firemode_hud then
        ish_firemode_hud.show_text(message)
    end
end

function show_indicator(indicator, weapon_section)
    if indicator and ish_firemode_hud then
        ish_firemode_hud.show_indicator(indicator, weapon_section)
    end
end

function hide_all()
    if ish_firemode_hud then
        ish_firemode_hud.hide_all()
    end
end

function actor_on_first_update()
    on_option_change()
    ish_firemode_hud.activate_hud()
end

function actor_on_net_destroy()
    ish_firemode_hud.deactivate_hud()
end

function on_option_change()
    _user_mode = (ui_mcm and ui_mcm.get("fireModeCheck/userMode")) or SINGLE_KEY_MODE
    _hide_gui = (ui_mcm and ui_mcm.get("fireModeCheck/hideGui")) or (not ui_mcm and true)
    _display_mode = (ui_mcm and ui_mcm.get("fireModeCheck/displayMode")) or DISPLAY_TEXT + DISPLAY_IMAGE

    toggle_firemode_gui()
end

function toggle_firemode_gui()
    pos = ActorMenu.get_maingame().m_ui_hud_states.m_fire_mode:GetWndPos()
    pos.x = ((_hide_gui and pos.x > 0) or ((not _hide_gui) and pos.x < 0)) and (-1 * pos.x) or pos.x -- Raven, no!
    ActorMenu.get_maingame().m_ui_hud_states.m_fire_mode:SetWndPos(pos)
end

function perform_setup()
    RegisterScriptCallback("on_before_key_press", ishy_on_before_key_press)
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("actor_on_net_destroy", actor_on_net_destroy)
end
